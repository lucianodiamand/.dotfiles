#!/usr/bin/env bash

CURL_FILE="${CURL_FILE:-curl.http}"
RAW_MODE=false
bat_cmd="bat"

# Detectar bat o batcat
if ! command -v bat &>/dev/null && command -v batcat &>/dev/null; then
  bat_cmd="batcat"
fi

print_error() {
  echo -e "\033[1;31m‚ùå $1\033[0m"
}

get_block() {
  local section="$1"
  awk "/^### ${section}[[:space:]]+-/{flag=1; next} /^### /{flag=0} flag" "$CURL_FILE"
}

get_csv_file() {
  local section="$1"
  awk "/*^### ${section}[[:space:]]+-/{flag=1; next} /^### /{flag=0} flag" "$CURL_FILE" |
    grep '^# csv:' | sed 's/# csv:[[:space:]]*//'
}

get_credentials_source() {
  section="$1"

  pass_id=$(awk "/^### ${section}[[:space:]]+-/{flag=1; next} /^### /{flag=0} flag" "$CURL_FILE" |
    grep '^# pass:' | sed 's/# pass:[[:space:]]*//')
  echo "${pass_id:-api/usuario}"
}

# Obtener token JWT usando pass
get_jwt_token() {
  pass_id=$(get_credentials_source "auth-token")

  if ! command pass show "$pass_id" &>/dev/null; then
    print_error "No se encontr√≥ la entrada en pass: $pass_id"
    exit 1
  fi

  creds=$(command pass show "$pass_id")
  pass=$(echo "$creds" | sed -n '1p')
  user=$(echo "$creds" | sed -n '2p')

  if [[ -z "$user" || -z "$pass" ]]; then
    print_error "La entrada '$pass_id' debe tener:"
    echo "  l√≠nea 1: contrase√±a"
    echo "  l√≠nea 2: usuario"
    exit 1
  fi

  export USER="$user"
  export PASS="$pass"

  >&2 echo "üîß Ejecutando login con usuario $USER"

  # Leer el bloque auth-token desde el archivo
  auth_block=$(get_block "auth-token")
  auth_block=$(envsubst <<< "$auth_block")

  # Ejecutar el bloque curl y capturar resultado asegurando -sS
  if ! echo "$auth_block" | grep -q -- '-sS'; then
    auth_block=$(echo "$auth_block" | sed -E 's/\bcurl\b/curl -sS/')
  fi

  result=$(bash <<< "$auth_block")

  token=$(echo "$result" | jq -r '.access_token')

  if [[ "$token" == "null" || -z "$token" ]]; then
    print_error "No se pudo obtener un token v√°lido"
    echo "$result"
    exit 1
  fi

  export TOKEN="$token"
}

# Ejecutar bloque curl
ep_section() {
  section="$1"
  block=$(get_block "$section")

  csv_file=$(get_csv_file "$section")
  if [[ -n "$csv_file" && -f "$csv_file" ]]; then
    # Si estamos en ejecucion normal (sin pick), usar solo la primer fila
    header=$(head -n1 "$csv_file")
    first_row=$(tail -n +2 "$csv_file" | head -n1)

    if [[ -z "$first_row" ]]; then
      print_error "El archivo CSV '$csv_file' no tiene datos"
      exit 1
    fi

    IFS=',' read -r $(echo "$header" | tr ',' ' ') <<< "$first_row"
    export $(echo "$header" | tr ',' ' ')
  elif [[ -n "$csv_file" ]]; then
    print_error "No se encontro el archivo CSV '$csv_file'"
    exit 1
  fi

  if [[ -z "$block" ]]; then
    print_error "El endpoint '$section' no est√° definido en $CURL_FILE"
    exit 1
  fi

  if [[ "$section" == "auth-token" ]] || echo "$block" | grep -q 'Authorization: Bearer.*\$TOKEN'; then
    get_jwt_token
  fi

  block=$(envsubst <<< "$block")

  # Inyectar -sS si no est√°
  if ! echo "$block" | grep -qE 'curl[^\\]*-sS'; then
    block=$(echo "$block" | sed -E 's/\bcurl\b/curl -sS/')
  fi

  if $RAW_MODE; then
    echo "$block" | bash
  else
    response=$(mktemp)
    errlog=$(mktemp)

    # Ejecutar curl, capturar error, status y salida
    if [[ "$section" == "auth-token" && -n "$PASS" ]]; then
      block_masked="${block//$PASS/********}"
      echo "$block_masked"
    else
      echo "$block"
    fi

    status_code=$(echo "$block" | sed -E 's/\bcurl\b/curl -sS -w "%{http_code}"/' | bash 2>"$errlog" | tee "$response" | tail -c 3)
    code=$?

    if [[ $code -ne 0 || "$status_code" == "000" ]]; then

      if [[ "$status_code" == "000" ]]; then
        print_error "No se pudo conectar al servidor o la conexi√≥n fue rechazada."
      fi
      print_error "El comando curl fall√≥ (c√≥digo $code)."
      if [[ -s "$errlog" ]]; then
        print_error "$(cat "$errlog")"
      fi
      rm -f "$response" "$errlog"
      exit $code
    fi

    case "$status_code" in
      401)
        print_error "Error 401: No autorizado. ¬øToken vencido o incorrecto?"
        ;;
      403)
        print_error "Error 403: Acceso prohibido. El token no tiene permisos."
        ;;
    esac

    body=$(head -c -3 "$response")
    rm -f "$response" "$errlog"

    if echo "$body" | grep -qE '^\s*[\{\[]'; then
      echo "$body" | jq 2>/dev/null | $bat_cmd --paging=never -l json 2>/dev/null || echo "$body"
    else
      echo "$body"
    fi
  fi
}

test_endpoint() {
  section="$1"
  block=$(get_block "$section")

  if [[ -z "$block" ]]; then
    print_error "El endpoint '$section' no est√° definido en $CURL_FILE"
    return 1
  fi

  if echo "$block" | grep -q 'Authorization: Bearer \$TOKEN'; then
    get_jwt_token
  fi

  block=$(envsubst <<< "$block")
  block=$(echo "$block" | sed -E 's/\bcurl\b/curl -sS -o /dev/null -w "%{http_code}"/')
  status_code=$(echo "$block" | bash 2>/dev/null)
  label="[$section]"

  if [[ "$status_code" =~ ^2 ]]; then
    echo -e "\033[1;32m‚úÖ $label $status_code\033[0m"
  else
    echo -e "\033[1;31m‚ùå $label $status_code\033[0m"
  fi
}

# Listar endpoints crudos
list_raw() {
  grep -E '^### [a-zA-Z0-9_-]+[[:space:]]+-' "$CURL_FILE" | sed -E 's/^### ([a-zA-Z0-9_-]+)[[:space:]]+-[[:space:]]+(.*)$/\1::\2/'
}

# Men√∫ interactivo con fzf
list_fzf() {
  list_raw | awk -F "::" '{ printf "%-20s %s\n", $1, $2 }' | fzf --ansi --prompt="Seleccion√° un endpoint: " | awk '{print $1}'
}

# Flags
if [[ "$1" == "--raw" ]]; then
  RAW_MODE=true
  shift
fi

# Mostrar ayuda
if [[ "$1" == "--help" ]]; then
  echo "Uso: ep [--raw] [nombre-endpoint]"
  echo
  echo "Opciones:"
  echo "  --raw         Mostrar salida sin formatear"
  echo "  --help        Mostrar esta ayuda"
  echo "  --list        Listar endpoints definidos"
  echo "  --generate    Crear plantilla b√°sica de curl.http"
  echo "  --test        Probar un endpoint (solo HTTP status)"
  echo "  --test-all    Probar todos los endpoints"
  echo
  echo "Ejemplo de estructura curl.http:"
  cat <<EOF

### auth-token - Obtener token JWT
# pass: api/usuario
curl -X POST http://localhost:3000/auth/login \\
  -H "Content-Type: application/json" \\
  -d "{\"username\": \"$USER\", \"password\": \"$PASS\"}"

### get-users - Obtener todos los usuarios
curl -X GET http://localhost:3000/users

### get-profile - Perfil autenticado
curl -X GET http://localhost:3000/profile \\
  -H "Authorization: Bearer $TOKEN"
EOF
  exit 0
fi

if [[ "$1" == "--print" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un nombre de endpoint: ep --print get-profile"
    exit 1
  fi

  section="$1"
  raw_block=$(get_block "$section")

  # Detectar si requiere TOKEN antes del envsubst
  if echo "$raw_block" | grep -q '\$TOKEN'; then
    get_jwt_token
  fi

  # Detectar si requiere PASS/USER antes del envsubst
  if echo "$raw_block" | grep -q '\$PASS'; then
    pass_id=$(get_credentials_source "auth-token")
    creds=$(command pass show "$pass_id")
    PASS=$(echo "$creds" | sed -n '1p')
    USER=$(echo "$creds" | sed -n '2p')
    export USER PASS
  fi

  block=$(envsubst <<< "$raw_block")

  # Enmascarar solo la contrase√±a
  if [[ -n "$PASS" ]]; then
    block="${block//$PASS/********}"
  fi

  echo "$block"
  exit 0
fi

if [[ "$1" == "--pick" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un endpoint: ep --pick crear-usuario"
    exit 1
  fi

  section="$1"
  csv_file=$(get_csv_file "$section")

  if [[ -z "$csv_file" || ! -f "$csv_file" ]]; then
    print_error "El endpoint '$section' no tiene CSV o el archivo no existe"
    exit 1
  fi

  header=$(head -n1 "$csv_file")
  fields=$(echo "$header" | tr ',' ' ')
  selected=$(tail -n +2 "$csv_file" | fzf --prompt="Seleccion√° un registro: ")

  if [[ -z "$selected" ]]; then
    print_error "No se selecciono ning√∫n registro"
    exit 1
  fi

  IFS=',' read -r $fields <<< "$selected"
  export $fields
  ep_section "$section"
  exit $?
fi

if [[ "$1" == "--copy" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un nombre de endpoint: ep --copy get-profile"
    exit 1
  fi

  section="$1"
  raw_block=$(get_block "$section")

  if echo "$raw_block" | grep -q '\$TOKEN'; then
    get_jwt_token
  fi

  if echo "$raw_block" | grep -q '\$PASS'; then
    pass_id=$(get_credentials_source "auth-token")
    creds=$(command pass show "$pass_id")
    PASS=$(echo "$creds" | sed -n '1p')
    USER=$(echo "$creds" | sed -n '2p')
    export USER PASS
  fi

  block=$(envsubst <<< "$raw_block")

  if [[ -n "$PASS" ]]; then
    block="${block//$PASS/********}"
  fi

  if command -v xclip &>/dev/null; then
    echo "$block" | xclip -selection clipboard
    echo "‚úÖ Copiado al portapapeles con xclip"
  elif command -v pbcopy &>/dev/null; then
    echo "$block" | pbcopy
    echo "‚úÖ Copiado al portapapeles con pbcopy"
  else
    print_error "No se encontr√≥ xclip ni pbcopy para copiar al portapapeles"
    echo "$block"
  fi
  exit 0
fi

if [[ "$1" == "--show" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un nombre de endpoint: ep --show get-profile"
    exit 1
  fi

  echo -e "\033[1;33m‚ö†Ô∏è  ATENCI√ìN: Este comando mostrar√° la contrase√±a en texto plano.\033[0m"
  read -rp "¬øContinuar? [s/N] " resp
  [[ "$resp" != "s" && "$resp" != "S" ]] && {
    echo "‚ùå Cancelado."
    exit 1
  }

  section="$1"
  block=$(get_block "$section")
  block=$(envsubst <<< "$block")

  echo "$block"
  exit 0
fi

if [[ "$1" == "--export" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un nombre de endpoint: ep --export get-profile"
    exit 1
  fi

  section="$1"
  raw_block=$(get_block "$section")

  if echo "$raw_block" | grep -q '\$TOKEN'; then
    get_jwt_token
  fi

  if echo "$raw_block" | grep -q '\$PASS'; then
    pass_id=$(get_credentials_source "auth-token")
    creds=$(command pass show "$pass_id")
    PASS=$(echo "$creds" | sed -n '1p')
    USER=$(echo "$creds" | sed -n '2p')
    export USER PASS
  fi

  block=$(envsubst <<< "$raw_block")

  if [[ -n "$PASS" ]]; then
    block_masked="${block//$PASS/********}"
  else
    block_masked="$block"
  fi

  # Ejecutar el comando (forzando -sS por si falta)
  output=$(echo "$block" | sed -E 's/\bcurl\b/curl -sS/' | bash 2>&1)
  formatted=$(echo "$output" | jq . 2>/dev/null || echo "$output")

  export_dir="./.ep-exports"
  mkdir -p "$export_dir"

  timestamp=$(date +%Y%m%d-%H%M%S)
  file="$export_dir/${section}-$timestamp.org"

  cat <<EOF > "$file"
* Endpoint: $section
:PROPERTIES:
:Exported: $(date)
:END:

** Comando curl

#+BEGIN_SRC sh
$block_masked
#+END_SRC

** Resultado de ejecuci√≥n

#+BEGIN_SRC json
$formatted
#+END_SRC
EOF

  echo "‚úÖ Exportado a $file"
  exit 0
fi

if [[ "$1" == "--add" ]]; then
  shift
  if [[ $# -lt 2 ]]; then
    print_error "Uso: ep --add nombre-endpoint \"Descripci√≥n del endpoint\""
    exit 1
  fi

  name="$1"
  desc="$2"

  if grep -q "^### $name " "$CURL_FILE"; then
    print_error "Ya existe un endpoint con el nombre '$name' en $CURL_FILE"
    exit 1
  fi

  tmpfile=$(mktemp /tmp/ep-add.XXXXXX)

  echo "üìù Peg√° el bloque curl en el editor. Guard√° y cerr√° para agregarlo a $CURL_FILE."
  editor="${EDITOR:-vi}"
  "$editor" "$tmpfile"

  if [[ ! -s "$tmpfile" ]]; then
    print_error "No se agreg√≥ ning√∫n contenido. Operaci√≥n cancelada."
    rm -f "$tmpfile"
    exit 1
  fi

  # Leer contenido
  raw=$(<"$tmpfile")
  rm -f "$tmpfile"

  # Quitar posible curl duplicado (dejar solo los args)
  raw=$(echo "$raw" | sed -E 's/^curl[[:space:]]+//')

  # Reemplazar token hardcodeado por $TOKEN
  raw=$(echo "$raw" | sed -E 's/(Authorization:\s*Bearer)[[:space:]]+[a-zA-Z0-9._-]+/\1 \$TOKEN/')

  # Paso 1: dividir argumentos largos (especialmente -H) en l√≠neas individuales
  normalized=$(echo "$raw" | sed 's/ -H /\'$'\n-H /g')

  # Paso 2: filtrar solo headers v√°lidos
  filtered=$(echo "$normalized" | awk '
    /^-H / {
      if ($0 ~ /Authorization:/ ||
          $0 ~ /Content-Type:/)
        print;
      next;
    }
    { print }
  ')

  # Paso 3: rearmar con formato tipo script (barra \ al final, salvo √∫ltima l√≠nea)
  formatted=$(echo "$filtered" | awk '
    NR == 1 { print "curl " $0; next }
    { print "  " $0 }
  ' | sed '$!s/$/ \\/')

  content="$formatted"

  {
    echo
    echo "### $name - $desc"
    echo "$content"
  } >> "$CURL_FILE"

  echo "‚úÖ Endpoint '$name' agregado limpiamente a $CURL_FILE"
  exit 0
fi

# Generar plantilla
if [[ "$1" == "--generate" ]]; then
  if [[ -f "$CURL_FILE" ]]; then
    print_error "Ya existe el archivo '$CURL_FILE'. No se sobrescribir√°."
    exit 1
  fi

  cat <<EOF > "$CURL_FILE"
### auth-token - Obtener token JWT
# pass: api/usuario
curl -X POST http://localhost:3000/auth/login \\
  -H "Content-Type: application/json" \\
  -d '{"username": "{{USER}}", "password": "{{PASS}}"}'

### get-users - Obtener todos los usuarios
curl -X GET http://localhost:3000/users

### get-profile - Perfil autenticado
curl -X GET http://localhost:3000/profile \\
  -H "Authorization: Bearer {{TOKEN}}"
EOF
  echo "‚úÖ Plantilla creada en $CURL_FILE"
  exit 0
fi

if [[ "$1" == "--list" ]]; then
  echo "Archivo: $CURL_FILE"
  echo "Comandos disponibles:"
  list_raw | awk -F "::" '{ printf "  \033[36m%-20s\033[0m %s\n", $1, $2 }'
  exit 0
fi

if [[ "$1" == "--test" ]]; then
  shift
  if [[ -z "$1" ]]; then
    print_error "Debe indicar un nombre de endpoint: ep --test get-users"
    exit 1
  fi
  test_endpoint "$1"
  exit $?
fi

if [[ "$1" == "--test-all" ]]; then
  echo "üîç Ejecutando tests sobre todos los endpoints de $CURL_FILE..."
  list_raw | awk -F "::" '{print $1}' | grep -v '^auth-token$' | while read -r endpoint; do
    test_endpoint "$endpoint"
  done
  exit 0
fi

# Men√∫ interactivo si no se pasa nada
if [[ -z "$1" ]]; then
  if [[ ! -f "$CURL_FILE" ]]; then
    print_error "El archivo '$CURL_FILE' no existe. No se puede mostrar el men√∫ interactivo."
    exit 1
  fi
  selected=$(list_fzf)
  [[ -n "$selected" ]] && ep_section "$selected"
  exit 0
fi

# Ejecutar directamente
ep_section "$1"

